A dictionary is a data structure that stores data in key-value pairs, allowing for efficient data retrieval based on unique keys. In C#, the `Dictionary<TKey, TValue>` class is part of the `System.Collections.Generic` namespace and is widely used for its fast lookups and flexible data storage.

### Key Properties and Methods of `Dictionary<TKey, TValue>`

#### Properties
1. **Count**: Gets the number of key-value pairs contained in the dictionary.
   ```csharp
   Dictionary<int, string> dict = new Dictionary<int, string>();
   int count = dict.Count;
   ```

2. **Keys**: Gets a collection containing the keys in the dictionary.
   ```csharp
   ICollection<int> keys = dict.Keys;
   ```

3. **Values**: Gets a collection containing the values in the dictionary.
   ```csharp
   ICollection<string> values = dict.Values;
   ```

#### Methods
1. **Add**: Adds a key-value pair to the dictionary.
   ```csharp
   dict.Add(1, "One");
   ```

2. **Remove**: Removes the value with the specified key from the dictionary.
   ```csharp
   dict.Remove(1);
   ```

3. **ContainsKey**: Determines whether the dictionary contains the specified key.
   ```csharp
   bool hasKey = dict.ContainsKey(1);
   ```

4. **ContainsValue**: Determines whether the dictionary contains a specific value.
   ```csharp
   bool hasValue = dict.ContainsValue("One");
   ```

5. **TryGetValue**: Gets the value associated with the specified key.
   ```csharp
   if (dict.TryGetValue(1, out string value)) {
       Console.WriteLine(value);
   }
   ```

6. **Clear**: Removes all keys and values from the dictionary.
   ```csharp
   dict.Clear();
   ```

7. **Indexer**: Gets or sets the value associated with the specified key.
   ```csharp
   dict[2] = "Two"; // Adds or updates the value for key 2
   ```

### Example
Here's a complete example demonstrating the use of a `Dictionary<TKey, TValue>` in C#:
```csharp
using System;
using System.Collections.Generic;

class Program {
    static void Main() {
        Dictionary<int, string> dict = new Dictionary<int, string>();

        // Adding elements
        dict.Add(1, "One");
        dict.Add(2, "Two");
        dict.Add(3, "Three");

        // Accessing elements
        Console.WriteLine("Value for key 2: " + dict[2]);

        // Checking for keys and values
        Console.WriteLine("Contains key 3: " + dict.ContainsKey(3));
        Console.WriteLine("Contains value 'Two': " + dict.ContainsValue("Two"));

        // Iterating over keys and values
        Console.WriteLine("All keys:");
        foreach (int key in dict.Keys) {
            Console.WriteLine(key);
        }

        Console.WriteLine("All values:");
        foreach (string value in dict.Values) {
            Console.WriteLine(value);
        }

        // Removing an element
        dict.Remove(2);

        // Trying to get a value
        if (dict.TryGetValue(3, out string val)) {
            Console.WriteLine("Value for key 3: " + val);
        }

        // Clearing the dictionary
        dict.Clear();
        Console.WriteLine("Count after clearing: " + dict.Count);
    }
}
```

This example covers the basic operations you can perform with a dictionary in C#. 

Source: Conversation with Copilot, 14/8/2024
(1) Dictionaries in Python - GeeksforGeeks. https://www.geeksforgeeks.org/python-dictionary/.
(2) Dictionaries in Python â€“ Real Python. https://realpython.com/python-dicts/.
(3) Dictionary in Data Structure | Scaler Topics. https://www.scaler.com/topics/dictionary-in-data-structure/.
(4) Fundamentals of data structures: Dictionaries - Wikibooks. https://en.wikibooks.org/wiki/A-level_Computing/AQA/Paper_1/Fundamentals_of_data_structures/Dictionaries.